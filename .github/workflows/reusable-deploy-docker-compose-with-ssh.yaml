name: Reusable Deploy Docker Compose With SSH

on:
  workflow_call:
    secrets:
      ssh_key:
        description: "SSH Private Key"
        required: true
      ssh_host:
        description: "SSH Host"
        required: true
      docker_compose_envs:
        description: |
          Environment variables to be set on the remote server.
          Format:
            export KEY1=VALUE1
            export KEY2=VALUE2
        required: false
    inputs:
      ssh_user:
        description: "SSH User"
        required: false
        type: string
        default: "github-actions"
      docker_compose_file:
        description: "Docker Compose File"
        required: false
        type: string
        default: "docker-compose.yaml"
      docker_compose_project_name:
        description: "Docker Project Name"
        required: true
        type: string
      docker_compose_volumes_folder:
        description: "Docker Volumes Folder"
        required: false
        type: string
      docker_compose_recreate:
        description: "Docker Recreate"
        required: false
        type: boolean
        default: true
      destroy:
        description: "Destroy the stack"
        required: false
        type: boolean
        default: false

env:
  DOCKER_COMPOSE_PROJECT_FOLDER: /home/${{ inputs.ssh_user }}/docker-compose/${{ inputs.docker_compose_project_name }}
  DOCKER_COMPOSE_FILE_FULL_PATH: /home/${{ inputs.ssh_user }}/docker-compose/${{ inputs.docker_compose_project_name }}/docker-compose.yaml

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: mkdir -p ~/.ssh && echo "${{ secrets.ssh_key }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

      - name: Clean Volumes Folder
        if: ${{ inputs.docker_compose_volumes_folder }}
        run: ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ secrets.ssh_host }} "rm -rf ${{ env.DOCKER_COMPOSE_PROJECT_FOLDER }}"

      - name: Create Docker Project Folder
        run: ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ secrets.ssh_host }} "mkdir -p ${{ env.DOCKER_COMPOSE_PROJECT_FOLDER }}"

      - name: Copy Docker Compose File
        run: scp -o StrictHostKeyChecking=no ${{ inputs.docker_compose_file }} ${{ inputs.ssh_user }}@${{ secrets.ssh_host }}:${{ env.DOCKER_COMPOSE_PROJECT_FOLDER }}

      - name: Copy Volumes Folder
        if: ${{ inputs.docker_compose_volumes_folder }}
        run: scp -r -o StrictHostKeyChecking=no ${{ inputs.docker_compose_volumes_folder }} ${{ inputs.ssh_user }}@${{ secrets.ssh_host }}:${{ env.DOCKER_COMPOSE_PROJECT_FOLDER }}
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs:
      - setup
    steps:
      - name: Setup SSH
        run: mkdir -p ~/.ssh && echo "${{ secrets.ssh_key }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

      - name: Deploy with Docker Compose (Recreate)
        if: ${{ !inputs.destroy && inputs.docker_compose_recreate }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ secrets.ssh_host }} << "EOF"
            ${{ secrets.docker_compose_envs || '' }}
            docker compose --project-name ${{ inputs.docker_compose_project_name }} -f ${{ env.DOCKER_COMPOSE_FILE_FULL_PATH }} up -d --force-recreate --remove-orphans --always-recreate-deps
          EOF

      - name: Deploy with Docker Compose
        if: ${{ !inputs.destroy && !inputs.docker_compose_recreate }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ secrets.ssh_host }} << "EOF"
            ${{ secrets.docker_compose_envs || '' }}
            docker compose --project-name ${{ inputs.docker_compose_project_name }} -f ${{ env.DOCKER_COMPOSE_FILE_FULL_PATH }} up -d
          EOF

      - name: Destroy with Docker Compose
        if: ${{ inputs.destroy }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ secrets.ssh_host }} << "EOF"
            ${{ secrets.docker_compose_envs || '' }}
            docker compose --project-name ${{ inputs.docker_compose_project_name }} -f ${{ env.DOCKER_COMPOSE_FILE_FULL_PATH }} down --volumes --remove-orphans
          EOF
